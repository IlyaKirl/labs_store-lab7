package ru.ystu.labs_store.service.cart;import com.sun.istack.Nullable;import org.springframework.stereotype.Service;import ru.ystu.labs_store.model.Cart;import ru.ystu.labs_store.model.Product;import ru.ystu.labs_store.model.User;import ru.ystu.labs_store.repository.CartRepository;import ru.ystu.labs_store.repository.ProductRepository;import ru.ystu.labs_store.repository.UserRepository;import java.text.DecimalFormat;import java.util.Collections;import java.util.List;import java.util.stream.Collectors;@Servicepublic class CartServiceImpl implements CartService {	private final ProductRepository productRepository;	private final CartRepository cartRepository;	private final UserRepository userRepository;	public CartServiceImpl(ProductRepository productRepository, CartRepository cartRepository, UserRepository userRepository) {		this.productRepository = productRepository;		this.cartRepository = cartRepository;		this.userRepository = userRepository;	}	@Override	public List<Cart> getProductList(String login, Integer id) {		User user = userRepository.findUserByLogin(login);		if (user != null) {			if (id == null) {				return cartRepository.findAll().stream().filter(it ->						it.getUser().getId() == user.getId() && it.getIdArchive() == null)						.collect(Collectors.toList());			} else {				return cartRepository.findAll().stream().filter(it ->						it.getIdArchive() != null && it.getUser().getId() == user.getId() && it.getIdArchive().getId() == id)						.collect(Collectors.toList());			}		} else {			return cartRepository.findAll();		}	}	@Override	public List<Cart> getProductListByIdHistory(String login, Integer id) {		User user = userRepository.findUserByLogin(login);		List<Cart> test = cartRepository.findAll();		if (user != null) {			return test.stream().filter(it ->					it.getUser().getId() == user.getId() &&							(it.getIdArchive() != null && it.getIdArchive().getId() == id))					.collect(Collectors.toList());		} else {			return Collections.emptyList();		}	}	@Override	public String getTotalPrice(String login, Integer id) {		double totalPrice = 0d;		for (Cart product : getProductList(login, id)) {			double price = product.getProduct().getPrice() * product.getCount();			totalPrice += price;		}		DecimalFormat format = new DecimalFormat("###,###,##0.#");		return "Total price: " + format.format(totalPrice) + " â‚½";	}	@Override	public void addProductToCartById(int idProduct, String login) {		Product product = productRepository.findById(idProduct).orElse(null);		User user = userRepository.findUserByLogin(login);		if (user != null) {			Cart cartProduct = new Cart(product, user);			cartRepository.save(cartProduct);		}	}	@Override	public void removeProductById(int id) {		Cart product = findCartProduct(id);		if (product != null) {			cartRepository.delete(product);		}	}	@Override	public void decreaseCountProduct(int id) {		Cart product = cartRepository.findById(id).orElse(null);		if (product != null) {			if (product.getCount() > 1) {				product.setCount(product.getCount() - 1);				cartRepository.save(product);			}		}	}	@Override	public void increaseCountProduct(int id) {		Cart product = cartRepository.findById(id).orElse(null);		if (product != null) {			product.setCount(product.getCount() + 1);			cartRepository.save(product);		}	}	private Cart findCartProduct(int idProduct) {		return cartRepository.findAll().stream()				.filter(it -> idProduct == it.getProduct().getId() && it.getIdArchive() == null)				.findAny()				.orElse(null);	}}